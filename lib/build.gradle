/*
 * Este fichero se genera automÃ¡ticamente con la tarea Gradle 'init'
 *
 * Durante este proceso se han escogido las opciones 
 *			- Proyecto tipo biblioteca
 *			- Java como lenguaje de programaciÃ³n
 *			- Groovy como lenguaje para el script gradle
 *			- Jupiter (JUnit5) como entorno de tests
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 *
 *
 * Se han añadido algunas dependencias y configuraciones para adaptarlo al proyecto que usamos como base en la asignatura IS del GITT
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'eclipse'
}

group = 'gitt.is'
version = '0.0.1-PRACTICAS'
sourceCompatibility = '1.8'


repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}
tasks.withType(JavaCompile) {
	description = "Compilación del código"
    //Añadir la opción Xlint
    options.deprecation = true
    options.encoding = 'ISO-8859-1'
}
tasks.withType(Javadoc){
    description = "Genera la documentacion"
    //indicar que la codificación es ISO
    options.docEncoding = 'ISO-8859-1'
    options.charSet = 'ISO-8859-1'
    options.docFilesSubDirs = true
    options.author = true
    options.version = true
    options.use = true
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.footer = "GITT-Ingenieria Software MagicLibrary"
    title = "Magic Libraryr"
}
//Además de descargarse las fuentes se descargará el javadoc correspondiente
eclipse {
    classpath {
        downloadJavadoc = true
    }
}

dependencies {

   //Nuestra biblioteca usa la API JPA para persistencia
   implementation group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.1.1'
   //Para poder ligar automáticamente un bean con una vista y facilitar la creación de la interfaz gráfica
   implementation group: 'org.jdesktop', name: 'beansbinding', version: '1.2.1'
	
   //El proveedor de JPA que vamos a usar es eclipselink
   implementation group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.8'

	//Usaremos la base de datos h2, una base de datos ligera en memoria (la información no persiste en realidad, sólo durante la ejecución)
	//implementation 'com.h2database:h2'
	implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

	
    // Usamos la API JUnit Jupiter para las pruebas de cÃ³digo
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
	testImplementation 'org.junit.platform:junit-platform-engine:1.9.3'

    //Añado para usar mockito

    testImplementation "org.mockito:mockito-core:2.+" 
    testImplementation "org.mockito:mockito-junit-jupiter:2.+"
	
	//Las siguientes dos dependencias las introduce gradle automÃ¡ticamente

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
       
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}
